[
{
	"uri": "https://ntvinh04.github.io/workshop-aws/2-prerequiste/2.1-creates3/2.1.1-creates3web/",
	"title": "Create an S3 bucket for website",
	"tags": [],
	"description": "",
	"content": "Create an S3 bucket for website Access the S3 service. Click Create bucket. On the Create bucket page. In the Bucket name field, enter chatapp-web. In the Block Public Access settings for this bucket section, uncheck Block all public access and select I acknowledge that the current settings might result in this bucket and the objects within becoming public. to allow everyone to access the website. Click Create bucket. Then go to the S3 chatapp-web you created and select Properties, scroll down to the Static website hosting section and select edit. In the Static website hosting section, select Enable to open other sections. Under Hosting type, select Host a static website. Under Index document and Error document, enter index.html and select Save changes so that S3 uses index.html as the default page for the website. Next, go to Permissions in the Bucket policy section and select edit Go to the downloaded code file, find the bucketPolicyWebchat.json file in the backend/s3 folder, and copy it In the Policy section, paste the copied policy "
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/3-lambda-api/3.1-lambda/",
	"title": "Create Lambda for Web Chat",
	"tags": [],
	"description": "",
	"content": "In this section, we will create the 9 Lambda functions required for the web chat to run.\nContent Create Lambda for REST API Create Lambda for WebSocket "
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/2-prerequiste/2.1-creates3/",
	"title": "Create S3",
	"tags": [],
	"description": "",
	"content": "In this step, you will need to create two buckets in S3: one bucket for storing and running the website, and another bucket for storing avatars and images from messages sent between users.\nCode used for the project Content Create S3 for the website Create S3 for images "
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Overview This is a workshop about serverless real-time webchat on AWS using S3 to store websites, store images uploaded by users via messages, or change user avatars. Cognito is used to handle user registration, login, and verification. Next, we will build an API using Lambda and API Gateway to manage data and user interactions with the system. Then, we will use DynamoDB to store data sent by Lambda to the system.\nProject Test Link\nContent Introduction Preparation steps Create Lambda and API Gateway Upload code to S3 Create CloudFront Clean up resources "
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/3-lambda-api/3.1-lambda/3.1.1-restapi/",
	"title": "Lambda REST API",
	"tags": [],
	"description": "",
	"content": " Access the Lambda service page. Click Create function. In the Function name field, enter getMessage For Runtime, select either Node.js 22.x or Node.js 18.x For Architecture, select x86_64 In the Permissions section, open Change default execution role, select Use an existing role in the Execution role section, and select the chatapp-role created earlier Click create function to create the Lambda function After creating the getMessage Lambda, you will be redirected to the getMessage function page Then scroll down to Code source and go to the backend/lamda directory, copy the code from the getMessage.mjs file, and paste it into Code source Click on deploy to save the code Do the same for the following Lambda functions: createUser, getUser, me, updateAvatar\nFor the Lambda upAvatar, since it uses external libraries that are not available in Lambda, you cannot paste it directly. Instead, you must download the library from your machine, zip the file, and deploy it to Lambda. Create the Lambda function upAvatar similar to the Lambda functions above. In the code source section, select Upload from and choose .zip file, then locate the upAvatar.zip file in the upAvatar directory and select upload.\nTo avoid errors, delete the upAvatar.zip, node_modules, package-lock.json, and package.json files, then cd into the upAvatar directory in VScode and use the following npm command to download and upload to Lambda npm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner uuid\n4. For the Lambda sendMessage function, create it but do not upload the code yet, as it will need to be modified to enable real-time web chat. Because the sendMessage function contains the following code segment: endpoint: ‘https://5gm2fis56a.execute-api.ap-southeast-1.amazonaws.com/production’, which can only be modified after deploying the WebSocket.\n"
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/",
	"title": "WebChat Serverless realtime",
	"tags": [],
	"description": "",
	"content": "AWS Serverless realtime webchat Overview This is a workshop about serverless real-time webchat on AWS using S3 to store websites, store images uploaded by users via messages, or change user avatars. Cognito is used to handle user registration, login, and verification. Next, we will build an API using Lambda and API Gateway to manage data and user interactions with the system. Then, we will use DynamoDB to store data sent by Lambda to the system.\nContent Introduction Preparation steps Create Lambda and API Gateway Upload code to S3 Create CloudFront Clean up resources "
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/2-prerequiste/2.1-creates3/2.1.2-creates3pic/",
	"title": "Create an S3 bucket for images",
	"tags": [],
	"description": "",
	"content": "Create an S3 bucket for images Access the S3 service Click Create bucket. On the Create bucket page. In the Bucket name field, enter chatapp-web. Under Block Public Access settings for this bucket, uncheck Block all public access and select I acknowledge that the current settings might result in this bucket and the objects within becoming public. Click Create bucket. Next, go to Permissions in the Bucket policy section and select edit Go to the downloaded code file, find the bucketPolicyPic.json file in the backend/s3 folder, and copy it In the Policy section, paste the copied json segment, then select Save changes Edit the S3 link in the bucket json file and CORS above if the name is different from workshop\nNext, scroll down to the Cross-origin resource sharing (CORS) section in Permissions and select edit. Go to the downloaded code file, find the corsS3Pic.json file in the backend/s3 folder, and copy it. In the Cross-origin resource sharing (CORS) section, paste the copied JSON segment, then select Save changes Then go to the frontend/public file and drag avatar.png into the chatapp-pic bucket If the bucket name is different from the workshop, you should retrieve the avatar.png link from the newly created bucket, then in the code directory frontend/constants file avatars3.js, change the link to avoid errors in the system\n"
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/3-lambda-api/3.2-api-gateway/",
	"title": "Create API Gateway",
	"tags": [],
	"description": "",
	"content": "After creating the Lambda functions for the REST API and WebSocket, the next step is to create similar APIs for use with Lambda.\nContent: Create WebSocket Create REST API "
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/2-prerequiste/2.2-createiamrole/",
	"title": "Create IAM Role",
	"tags": [],
	"description": "",
	"content": "Create IAM Role In this step, we will create an IAM Role for the lambda functions. This IAM Role will be assigned policies that allow Lambda to create and log entries in CloudWatch to check for errors during the process. Next is the functionality that allows Lambda to read and write data to the two DynamoDB tables that will be created soon: User and Messages. Next, we will allow Lambda to upload files to S3. Finally, we will allow Lambda to send messages or close Websocket connections through API Gateway.\nAccess the IAM service.\nIn the left navigation bar, click Policies.\nClick Create Policy.\nIn the Policy editor section, select JSON\nGo to the code file you uploaded to the backend/lambda directory, open the policyLambda.json file, copy the JSON code, and paste it into the Policy editor section, then select Next.\nIn the Policy name field, enter the policy name as chatapp and review the Permissions defined in this policy section to ensure the policy is complete. Click Create policy to create the policy. In the left navigation bar, click Roles. Click Create role In the Service or use case section of Use case, select Lambda Click Next Select the policy created above and click Next In Role name, enter chatapp-role then review and click Create role "
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/3-lambda-api/3.2-api-gateway/3.2.2-restapi/",
	"title": "Create REST API",
	"tags": [],
	"description": "",
	"content": " Access the API Gateway service interface. Click create an API. Under REST API, select Build In the API name field, enter chatapp-RestAPI then select Create API On the left side, select Authorizers Click Create authorizer In the Authorizer name field, enter cognito In the Authorizer type field, select cognito In Cognito user pool, select the user pool you created In the Token source field, enter Authorization then select Create authorizer On the left side, select Resources. Select / under Create resource, then click Create resource. In the Resource name field, enter user then click Create resource Click on create method in the newly created /user In Method type, select GET Enable Lambda proxy integration In Lambda function, select the getUser function, then click Create method Then, for the GET method, select Method request and click Edit Under Authorization, select the Cognito you created, then click Save Click Enable CORS Select all boxes and click Save Next, create the resource send-message with the POST method and the Lambda function sendMessage Add Authorization to the send-message method Enable CORS for the send-message method Then create the resource create-user with the POST method, Lambda function createUser Attach Authorization to the create-user method Enable CORS for the create-user method me with GET method, Lambda function me Add Authorization to the me method Enable CORS for the me method From the /me resource, create an additional PUT method with the updateAvatar function After creating the /me resource, create an additional /avatar resource From the /avatar resource, create a POST method with Lambda upAvatar, then Enable CORS With avatar, there is no need to add Authorization The reason why /me uses the PUT method and /avatar uses the POST method is because POST is used to create something that does not yet exist, while PUT is used to replace something that already exists. /avatar is used to create an S3 URL to store the avatar created by the user, while the PUT of /me replaces the URL just created by /avatar in the User table.\nFrom the resource / select Create resource and create the resource message From the resource /message select Create resource and create the resource {conversationId} Then create a GET method with the Lambda function getMessage After completing, click Deploy API In the stage section, select * New Stage * Enter the stage name dev and select deploy Similar to websocket, copy the middle part of the invoke URL: 92ll2qcxai.execute-api.ap-southeast-1.amazonaws.com Then replace it in the code file "
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/3-lambda-api/3.2-api-gateway/3.2.1-websocket/",
	"title": "Create VPC Endpoint",
	"tags": [],
	"description": "",
	"content": "Create VPC Endpoint SSM We will create 3 interface endpoints required by the Session Manager:\nInterface endpoints: com.amazonaws.region.ssm com.amazonaws.region.ec2messages com.amazonaws.region.ssmmessages You can refer to more here\nContent: Create Endpoint ssm Create Endpoint ssmmessages Create Endpoint ec2messages "
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/3-lambda-api/3.1-lambda/3.1.2-websocket/",
	"title": "Lambda Websocket",
	"tags": [],
	"description": "",
	"content": " Access the Lambda service page. Click Create function. In the Function name field, enter connect For Runtime, select either Node.js 22.x or Node.js 18.x For Architecture, select x86_64 In the Permissions section, open the Change default execution role section, select Use an existing role in the Execution role section, and select the chatapp-role role created earlier Click create function to create the Lambda function After creating the Lambda connect function, you will be redirected to the connect function page Then go to the backend/socket directory, find the connect directory, cd into it, and paste the npm command to install the libraries npm install jsonwebtoken jwk-to-pem aws-sdk After completing the installation, zip the connect directory When zipping, do not zip the outer directory; instead, zip all files within the directory. If you zip the outer directory, deploying to Lambda will result in an error because the index.js file cannot be found, causing the code to fail.\nThen upload the zip file to Lambda Return to the function page and click create function to create the disconnect function. Then go to the backend/socket directory, find the disconnect.js file, copy the code, and paste it into the code source. "
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/2-prerequiste/",
	"title": "Preparation Steps",
	"tags": [],
	"description": "",
	"content": "Content Prepare S3 for webchat Create IAM Role Create DynamoDB Create Cognito "
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/2-prerequiste/2.3-createdb/",
	"title": "Create DynamoDB",
	"tags": [],
	"description": "",
	"content": "Create User and Messages Tables In this step, we will create two tables, User and Messages, to store user information retrieved from Cognito and to store messages sent by users.\nAccess the DynamoDB service.\nOn the DynamoDB page, click Create table.\nIn the Table name field, enter User In the Partition Key field, enter userId Then click Create Table Next is the Messages table In the Table name field, enter Messages In the Partition Key field, enter conversationId In the Sort Key field, enter timestamp Then click Create Table After creating the tables, wait until the Status of both tables is Active to complete the process. "
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/3-lambda-api/",
	"title": "Create Lambda and API Gateway",
	"tags": [],
	"description": "",
	"content": "In this step, we will create Lambda and API Gateway for the system.\nContent 3.1. Create Lambda 3.2. Create API Gateway\n"
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/2-prerequiste/2.4-createcog/",
	"title": "Create Cognito",
	"tags": [],
	"description": "",
	"content": "Create User Pools for Webchat In this step, we will create User pools to manage user registration, login, and verification.\nAccess the Cognito service. On the Cognito interface, click Get started for free in less than five minutes or click User pools in the left navigation bar, then select Create user pool.\nUnder Application type, select Single-page application (SPA) because SPA provides the best support for websites that use URLs that change based on user activity, such as React. Under Configure options, select email under Options for sign-in identifiers In the Required attributes for sign-up section, select email and name so that users must enter this information when registering and cannot skip it. Then click Create user directory to create a User pool. After creating, return to the User pools interface and select the User pools you just created. Copy User pool ID in the User pool interface.\nThen go to the search section of the code file and paste it into Replace, find the README.md file and find the line userpoolId, copy and paste it into Search, and click Replace All to replace userpooldId in the code. In the left navigation bar, click App clients and select chatapp. Copy the ClientID of chatapp, then do the same to replace the ClientID just created from user pools with the ClientID of the code. After creating the two buckets in S3, the two tables in DynamoDB, and the user pool in Cognito, the next step is to create Lambda and API Gateway for the Lambda functions.\n"
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/4-s3/",
	"title": "Upload code to S3",
	"tags": [],
	"description": "",
	"content": "After completing all the steps above, there is only one more step left: uploading the code to the website bucket.\nGo to the directory containing the code. cd into frontend and enter npm install\nAfter npm install is complete, enter npm run build After running, you will have the dist file, which is the frontend code optimized for AWS use Upload the dist file to S3 After uploading, go to the Properties section, scroll down to Static website hosting, copy the website URL, and use it When testing on the same machine, it is recommended to test on two different browsers because using the same browser, even in private mode, may result in a duplicate connectionId error.\n"
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/5-cloudfront/",
	"title": "Create CloudFront",
	"tags": [],
	"description": "",
	"content": "After uploading Webchat to S3 and using it, when there are too many messages or large images, it takes a long time to load, so use CloudFront to speed up the website and make it smoother.\nAccess CloudFront Click Create a CloudFront distribution. In the Distributions field, enter vchat to help identify the purpose of this CloudFront. You can add more details in the Description field. Click Next. Select Amazon S3 for Origin Type In the S3 origin field, enter the URL of the chatapp from S3 or select Browse S3 and locate the bucket containing the website Then select Use website endpoint and click Next Since this is a personal project and there is no important data, you can select Do not enable security protections and click Next After completing the process, wait about 5 minutes for Last modified to show the time when the deployment is complete After deployment is complete, copy the Distribution domain name and test it This is the URL of S3, which shows that it takes 169ms to render the interface. This is the URL for CloudFront, which only takes 9ms to render the interface. "
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/6-cleanup/",
	"title": "Cleaning up resources",
	"tags": [],
	"description": "",
	"content": "Now, here are the steps to delete the resources you created.\nDelete S3 Access S3 Click to select the S3 bucket you created Click Empty. Enter permanently delete, then click Empty to delete the objects in the bucket. Click Exit. After deleting all objects in the bucket, click Delete Then enter the bucket name and click Delete bucket Delete API Gateway Access API Gateway.\nClick to select the created API Click Delete Enter confirm and click Delete Delete CloudWatch Access CloudWatch.\nOn the left sidebar, select Logs, then select Log groups Click to select the log groups created during the process Click Action and select Delete log group(s) Click Delete Delete Policy Access IAM.\nOn the left sidebar, select Policies Click to select the policy created during the process Click Delete Enter the policy name and click Delete Delete Role Access IAM.\nSelect Roles from the left sidebar. Click on the role created during the process. Click Delete. Enter the role name and click Delete. Delete Lambda Access the Lambda service page.\nOn the left sidebar, select Functions. Click to select the functions created during the process. Click Action and select Delete. Enter confirm and click Delete. Delete DynamoDB Access the DynamoDB service.\nSelect Tables from the left sidebar. Click to select the tables created during the process. Click Delete. Select Delete all CloudWatch alarms for the 2 tables selected. Enter confirm and click Delete Delete Cognito Access the Cognito\nOn the left sidebar, select User pools Click to select the user pools created during the process Click Delete Select Delete Cognito domain ap-southeast-1vhb6cgguj that you assigned and Deactivate deletion protection. Enter the user pool name and click Delete Delete CloudFront Access the CloudFront service\nOn the left sidebar, select Distributions Click on the Distributions created during the process Click Disable and wait until Last modified no longer shows deloyinng Click Delete and confirm deletion "
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ntvinh04.github.io/workshop-aws/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]